//@version=4
strategy("Siamak's Strategy", shorttitle="SMI", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100, initial_capital=400, currency=currency.USD, commission_type=strategy.commission.percent, commission_value=0.075, calc_on_every_tick=true)

Diff = input(title="Diff Length", type=input.float, defval=0.17)
FromYear  = input(defval = 2021, title = "From Year", minval = 2017)
FromMonth = input(defval = 10, title = "From Month", minval = 1, maxval = 12)
FromDay   = input(defval = 1, title = "From Day", minval = 1, maxval = 31)
FromHours = input(defval = 00, title = "From Hours", minval = 1, maxval = 24)
FromMinutes = input(defval = 00, title = "From Minutes", minval = 1, maxval = 60)

ToYear    = input(defval = 2021, title = "To Year", minval = 2017)
ToMonth   = input(defval = 10, title = "To Month", minval = 1, maxval = 12)
ToDay     = input(defval = 10, title = "To Day", minval = 1, maxval = 31)
ToHours   = input(defval = 23, title = "To Hours", minval = 1, maxval = 24)
ToMinutes = input(defval = 59, title = "To Minutes", minval = 1, maxval = 60)

start     = timestamp(FromYear, FromMonth, FromDay, FromHours, FromMinutes)  // backtest start window
finish    = timestamp(ToYear, ToMonth, ToDay, ToHours, ToHours)        // backtest finish window

between_dates = time >= start and time <= finish

length = input(title="ATR Period", type=input.integer, defval=1)
mult = input(title="ATR Multiplier", type=input.float, step=0.1, defval=1.85)
showLabels = input(title="Show Buy/Sell Labels ?", type=input.bool, defval=true)
useClose = input(title="Use Close Price for Extremums ?", type=input.bool, defval=false)
highlightState = input(title="Highlight State ?", type=input.bool, defval=false)

atr = mult * atr(length)

longStop = (useClose ? highest(close, length) : highest(length)) - atr
longStopPrev = nz(longStop[1], longStop) 
longStop := close[1] > longStopPrev ? max(longStop, longStopPrev) : longStop

shortStop = (useClose ? lowest(close, length) : lowest(length)) + atr
shortStopPrev = nz(shortStop[1], shortStop)
shortStop := close[1] < shortStopPrev ? min(shortStop, shortStopPrev) : shortStop

var int dir = 1
dir := close > shortStopPrev ? 1 : close < longStopPrev ? -1 : dir

var color longColor = color.green
var color shortColor = color.red

// longStopPlot = plot(dir == 1 ? longStop : na, title="Long Stop", style=plot.style_linebr, linewidth=2, color=longColor)
buySignal = dir == 1 and dir[1] == -1
// plotshape(buySignal ? longStop : na, title="Long Stop Start", location=location.absolute, style=shape.circle, size=size.tiny, color=longColor, transp=0)
plotshape(buySignal and showLabels ? longStop : na, title="Buy Label", text="Buy", location=location.belowbar, style=shape.labelup, size=size.tiny, color=longColor, textcolor=color.white)

// shortStopPlot = plot(dir == 1 ? na : shortStop, title="Short Stop", style=plot.style_linebr, linewidth=2, color=shortColor)
sellSignal = dir == -1 and dir[1] == 1
// plotshape(sellSignal ? shortStop : na, title="Short Stop Start", location=location.absolute, style=shape.circle, size=size.tiny, color=shortColor, transp=0)
plotshape(sellSignal and showLabels ? shortStop : na, title="Sell Label", text="Sell", location=location.abovebar, style=shape.labeldown, size=size.tiny, color=shortColor, textcolor=color.white)

midPricePlot = plot(ohlc4, title="", style=plot.style_circles, linewidth=0, display=display.none, editable=false)

longFillColor = highlightState ? (dir == 1 ? longColor : na) : na
shortFillColor = highlightState ? (dir == -1 ? shortColor : na) : na
// fill(midPricePlot, longStopPlot, title="Long State Filling", color=longFillColor)
// fill(midPricePlot, shortStopPlot, title="Short State Filling", color=shortFillColor)

changeCond = dir != dir[1]


// ZLSMA
_length = input(title="Length", type=input.integer, defval=32)
_offset = input(title="Offset", type=input.integer, defval=0)
_src = input(close, title="Source")
lsma = linreg(_src, _length, _offset)
lsma2 = linreg(lsma, _length, _offset)
eq= lsma-lsma2
zlsma = lsma+eq
plot(zlsma, color=color.yellow, linewidth=1)

// TSI
// long = input(title="Long Length", type=input.integer, defval=3)
// short = input(title="Short Length", type=input.integer, defval=3)
// signal = input(title="Signal Length", type=input.integer, defval=4)
// price = close
// double_smooth(src, long, short) =>
// 	fist_smooth = ema(src, long)
// 	ema(fist_smooth, short)
// pc = change(price)
// double_smoothed_pc = double_smooth(pc, long, short)
// double_smoothed_abs_pc = double_smooth(abs(pc), long, short)
// tsi_value = 100 * (double_smoothed_pc / double_smoothed_abs_pc)
// plot(tsi_value, color=#2962FF) // BLUE
// plot(ema(tsi_value, signal), color=#E91E63) // RED
// tsiBlueLine = tsi_value
// tsiRedLine = ema(tsi_value, signal)

longOnly  = open > zlsma - Diff and (open - zlsma < Diff)
shortOnly = open < zlsma + Diff and (zlsma - close < Diff)

plot(close, color=color.red, style=plot.style_cross)
plot(open, color=color.green, style=plot.style_cross)

// closeLong = crossunder(tsiBlueLine, tsiRedLine)
// closeShort = crossover(tsiBlueLine, tsiRedLine)
closeLong = (open > close) and (close < zlsma)
closeShort = (close > open) and (close > zlsma)

if between_dates
    strategy.entry("Long", strategy.long, when=(buySignal and longOnly), comment="Open Long trade")
    strategy.entry("Short", strategy.short, when=(shortOnly and sellSignal), comment="Open Short trade")

strategy.close("Long", when=closeLong, comment="Close Long")
strategy.close("Short", when=closeShort, comment="Close Short")
